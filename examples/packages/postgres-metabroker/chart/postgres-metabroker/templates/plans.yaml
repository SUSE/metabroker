{{- /*
Copyright 2020 SUSE

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ -}}

{{- range $plan := .Values.plans }}
---
apiVersion: servicebroker.metabroker.suse.com/v1alpha1
kind: Plan
metadata:
  name: {{ printf "%s-%s" $.Release.Name $plan.name | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    {{- include "postgres-metabroker.labels" $ | nindent 4 }}
spec:
  offering: {{ $.Release.Name | quote }}
  description: {{ $plan.description | quote }}
  provisioning:
    chart:
      url: https://charts.bitnami.com/bitnami/postgresql-10.1.2.tgz
    values:
      schema: |
        "$schema": http://json-schema.org/draft-07/schema#
        type: object
        properties:
          postgresqlDatabase:
            type: string
            pattern: "^[\\w\u00C0-\u017F]{2,31}$"
      default: |
        postgresqlDatabase: {{ $.Release.Name | quote }}
        postgresqlUsername: postgres
        # TODO: remove this hardcoded password.
        postgresqlPassword: postgres
      static: |
        replication:
          {{- if (gt (int $plan.config.readReplicas) 0) }}
          enabled: true
          readReplicas: {{ $plan.config.readReplicas }}
          synchronousCommit: "on"
          numSynchronousReplicas: {{ $plan.config.readReplicas }}
          applicationName: {{ $.Release.Name | quote }}
          {{- else }}
          enabled: false
          {{- end }}
  binding:
    credentials:
      runContainer:
        image: {{ $plan.binding.image }}
        command: [/bin/bash]
        args:
        - -c
        - |
          set -o errexit -o nounset -o pipefail

          binding_user="${METABROKER_CREDENTIAL_NAME//-/_}"
          binding_pass=$(grep --text --only-matching --max-count=64 -E '[0-9a-zA-Z]$' /dev/urandom | tr -d '\n')

          pg_host="${METABROKER_INSTANCE_HELM_NAME}-postgresql"
          pg_database=$(yq read "${METABROKER_VALUES_FILE}" 'postgresqlDatabase')

          output_patch=$(cat <<EOF
            {
              "data": {
                "username": "$(base64 <<<"${binding_user}")",
                "password": "$(base64 <<<"${binding_pass}")",
                "protocol": "$(base64 <<<"postgresql")",
                "port": "$(base64 <<<"5432")",
                "host": "$(base64 <<<"${pg_host}")",
                "database": "$(base64 <<<"${pg_database}")",
                "uri": "$(base64 <<<"postgresql://${binding_user}:${binding_pass}@${pg_host}:5432/${pg_database}")"
              }
            }
          EOF
          )
          kubectl patch "${METABROKER_OUTPUT}" --patch="$(tr -d '\n' <<<"${output_patch}")"

          # The admin password for the database to create the new credentials.
          pg_password=$(kubectl get secret "${METABROKER_INSTANCE_HELM_NAME}-postgresql" \
            --output jsonpath='{ .data.postgresql-password }' \
            | base64 --decode)

          revoke_if_exists_query=$(cat <<SQL
            DO
            \$do\$
            BEGIN
              IF EXISTS (SELECT FROM pg_roles WHERE rolname = '${binding_user}') THEN
                REVOKE ALL PRIVILEGES ON DATABASE ${pg_database} FROM ${binding_user};
              END IF;
            END
            \$do\$
          SQL
          )
          psql "postgresql://postgres:${pg_password}@${pg_host}/${pg_database}" \
            --command "${revoke_if_exists_query}"

          create_user_query="DROP ROLE IF EXISTS ${binding_user}; CREATE USER ${binding_user} WITH PASSWORD '${binding_pass}' NOCREATEDB;"
          psql "postgresql://postgres:${pg_password}@${pg_host}/${pg_database}" \
            --command "${create_user_query}"

          grant_privileges_query="GRANT ALL PRIVILEGES ON DATABASE ${pg_database} TO ${binding_user};"
          psql "postgresql://postgres:${pg_password}@${pg_host}/${pg_database}" \
            --command "${grant_privileges_query}"
{{- end }}
